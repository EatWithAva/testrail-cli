group 'org.openmbee.testrail'
version '1.1.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = 1.8

String buildTag = project.getProperties().get('buildTag')
if (buildTag != null && !buildTag.isEmpty() && buildTag != version) {
    throw new GradleException('Version mismatch.')
}
if (buildTag == null || buildTag.isEmpty() || project.getProperties().getOrDefault('artifactoryRepository', '').toLowerCase().contains('snapshot')) {
    version += '-SNAPSHOT'
}
String buildNumber = project.getProperties().getOrDefault('buildNumber', System.currentTimeSeconds());

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.9.0'
        classpath group: 'com.jfrog.bintray.gradle', name: 'gradle-bintray-plugin', version: '1.8.4'
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '4.0.3'
    }
}

repositories {
    jcenter()
/*
    maven {
        url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
    }
*/
}

dependencies {
    compile "org.projectlombok:lombok:1.16.16"

    compile group: 'org.openmbee.junit', name: 'junit-xml-parser', version: '1.0.0'
    compile group: 'org.openmbee.testrail', name: 'testrail-client-wrapper', version: '1.1.0'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.openmbee.testrail.cli.JUnitPublisher'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier 'sources'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
        }
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}

artifactory {
    contextUrl = project.getProperties().get('artifactoryUrl')
    publish {
        repository {
            repoKey = project.getProperties().get('artifactoryRepository')
            username = project.getProperties().get('artifactoryUsername')
            password = project.getProperties().get('artifactoryPassword')
        }
        defaults {
            publications('mavenJava')
            publications('shadow')
        }
        if (buildNumber != null && !buildNumber.isEmpty()) {
            clientConfig.info.setBuildNumber(buildNumber)
        }
    }
}
artifactoryPublish.dependsOn(assemble, sourcesJar, javadocJar)

bintray {
    user = project.getProperties().get('bintrayUser')
    key = project.getProperties().get('bintrayKey')
    publications = ['mavenJava', 'shadow']
    publish = true
    pkg {
        repo = project.getProperties().get('bintrayRepo')
        name = rootProject.name
        userOrg = project.getProperties().get('bintrayUserOrg')
    }
}